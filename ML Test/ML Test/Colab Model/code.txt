import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'

import numpy as np
import tensorflow as tf
from tensorflow.keras import layers
import tensorflow_decision_forests as tfdf
from urllib.parse import unquote_to_bytes
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# example data
data = [
    { 'str':'foo=1', 'attack':0 },
    { 'str':'foo=1%27%20OR%201=1%2D%2D', 'attack':1 },
      { 'str':'foo=1', 'attack':0 },
    { 'str':'foo=1%27%20OR%201=1%2D%2E', 'attack':1 },
      { 'str':'foo=1', 'attack':0 },
    { 'str':'foo=1%27%20OR%201=1%2D%2F', 'attack':1 },
      { 'str':'foo=1', 'attack':0 },
    { 'str':'foo=1%27%20OR%201=1%2D%2G', 'attack':1 },
      { 'str':'foo=1', 'attack':0 },
    { 'str':'foo=1%27%20OR%201=1%2D%2H', 'attack':1 },
      { 'str':'foo=1', 'attack':0 },
    { 'str':'foo=1%27%20OR%201=1%2D%2I', 'attack':1 },
     { 'str':'foo=2', 'attack':0 },
     { 'str':'foo=3', 'attack':0 },
     { 'str':'foo=4', 'attack':0 },
     { 'str':'foo=5', 'attack':0 },
     { 'str':'foo=6', 'attack':0 },
     { 'str':'foo=7', 'attack':0 },
     { 'str':'foo=8', 'attack':0 },
     { 'str':'foo=9', 'attack':0 },
     { 'str':'foo=10', 'attack':0 },


]

#
# Prepare Data
#

maxlen = 1024

X = []
Y = []

def decode_query(str):
    return unquote_to_bytes(str.replace('+',' '))

for item in data:
    arr = decode_query(item['str'])[:maxlen]
    arrlen = len(arr)
    seq = [0] * maxlen
    for i in range(arrlen):
        seq[maxlen - arrlen + i] = arr[i]
    X.append(seq)
    Y.append(item['attack'])

#
# Build Model (Simple LSTM)
#
# Convert X and Y to NumPy arrays
X = np.array(X)
Y = np.array(Y)
#model = tf.keras.Sequential([
#    layers.Input(shape=(maxlen,), batch_size=1),
#    layers.Embedding(256, 32),
#    layers.randomforest(16),
#    layers.Dense(1, activation='sigmoid')])

#model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.5, random_state=42)


model = tfdf.keras.RandomForestModel()

# Add evaluation metrics
model.compile(
    metrics=["accuracy"]
)
# Predict on the test set
y_pred = model.predict(X_test)
# Convert predictions to binary values (0 or 1)
y_pred = (y_pred > 0.5).astype(int) # Assuming binary classification

accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')


export_archive = tf.keras.export.ExportArchive()
export_archive.track(model)
export_archive.add_endpoint(
    name='serve',
    fn=model.call,
    input_signature=[tf.TensorSpec(shape=(1, maxlen), dtype=tf.float32)],
)
export_archive.write_out('model')

converter = tf.lite.TFLiteConverter.from_saved_model('model')

rf_model = converter.convert()

with open('rf.model', 'wb') as f:
    f.write(rf_model)